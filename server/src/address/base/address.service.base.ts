/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Address, Customer } from "@prisma/client";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { DbService } from "src/dbService/db.service";

export class AddressServiceBase {
  constructor(protected readonly prisma: DbService) {}

  async count<T extends Prisma.AddressFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddressFindManyArgs>
  ): Promise<number> {
    return await this.prisma.address.count(args);
  }

  async findMany<T extends Prisma.AddressFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddressFindManyArgs>
  ): Promise<PaginatedInterface<Address>> {
    const [data, totalCount] = await Promise.all([
      this.prisma.address.findMany(args),
      this.prisma.address.count({ where: { deletedAt: null } }),
    ]);

    return { paginatedResult: data, totalCount };
  }
  async findOne<T extends Prisma.AddressFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddressFindUniqueArgs>
  ): Promise<Address | null> {
    return await this.prisma.address.findUnique(args);
  }
  async create<T extends Prisma.AddressCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddressCreateArgs>
  ): Promise<Address> {
    return await this.prisma.address.create<T>(args);
  }
  async createMany<T extends Prisma.AddressCreateManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddressCreateManyArgs>
  ): Promise<Prisma.BatchPayload> {
    return await this.prisma.address.createMany<T>(args);
  }
  async update<T extends Prisma.AddressUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddressUpdateArgs>
  ): Promise<Address> {
    return await this.prisma.address.update<T>(args);
  }
  async delete<T extends Prisma.AddressDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddressDeleteArgs>
  ): Promise<Address> {
    return await this.prisma.address.delete(args);
  }

  async updateMany<T extends Prisma.AddressUpdateManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddressUpdateManyArgs>
  ): Promise<Prisma.BatchPayload> {
    return await this.prisma.address.updateMany(args);
  }

  async findCustomers(
    parentId: string,
    args: Prisma.CustomerFindManyArgs
  ): Promise<Customer[]> {
    return this.prisma.address
      .findUnique({
        where: { id: parentId },
      })
      .customers(args);
  }
}
