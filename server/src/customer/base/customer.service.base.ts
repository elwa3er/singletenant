/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Customer, Order, Address } from "@prisma/client";
import { PaginatedInterface } from "../../util/PaginatedInterface";
import { DbService } from "src/dbService/db.service";

export class CustomerServiceBase {
  constructor(protected readonly prisma: DbService) {}

  async count<T extends Prisma.CustomerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerFindManyArgs>
  ): Promise<number> {
    return await this.prisma.customer.count(args);
  }

  async findMany<T extends Prisma.CustomerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerFindManyArgs>
  ): Promise<PaginatedInterface<Customer>> {
    const [data, totalCount] = await Promise.all([
      this.prisma.customer.findMany(args),
      this.prisma.customer.count({ where: { deletedAt: null } }),
    ]);

    return { paginatedResult: data, totalCount };
  }
  async findOne<T extends Prisma.CustomerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerFindUniqueArgs>
  ): Promise<Customer | null> {
    return await this.prisma.customer.findUnique(args);
  }
  async create<T extends Prisma.CustomerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerCreateArgs>
  ): Promise<Customer> {
    return await this.prisma.customer.create<T>(args);
  }
  async createMany<T extends Prisma.CustomerCreateManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerCreateManyArgs>
  ): Promise<Prisma.BatchPayload> {
    return await this.prisma.customer.createMany<T>(args);
  }
  async update<T extends Prisma.CustomerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerUpdateArgs>
  ): Promise<Customer> {
    return await this.prisma.customer.update<T>(args);
  }
  async delete<T extends Prisma.CustomerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerDeleteArgs>
  ): Promise<Customer> {
    return await this.prisma.customer.delete(args);
  }

  async updateMany<T extends Prisma.CustomerUpdateManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerUpdateManyArgs>
  ): Promise<Prisma.BatchPayload> {
    return await this.prisma.customer.updateMany(args);
  }

  async findOrders(
    parentId: string,
    args: Prisma.OrderFindManyArgs
  ): Promise<Order[]> {
    return this.prisma.customer
      .findUnique({
        where: { id: parentId },
      })
      .orders(args);
  }

  async getAddress(parentId: string): Promise<Address | null> {
    return this.prisma.customer
      .findUnique({
        where: { id: parentId },
      })
      .address();
  }
}
